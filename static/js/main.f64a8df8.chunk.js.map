{"version":3,"sources":["index.js","App.js"],"names":["ReactDOM","render","useState","view","setView","PrevNumber","setPrevNumber","NextNumber","setNextNumber","operator","setOperator","className","id","value","map","item","onClick","event","command","parseFloat","document","getElementById"],"mappings":"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","file":"static/js/main.f64a8df8.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n","import React, { useState } from \"react\";\nimport \"./global.css\";\n/* \n  Nicolas Oliveira 2020\n  O estilo foi feito em grid, possibilitando que a função\n  não dependa de ordem e sendo renderizada a partir de um\n  array => arrayNumbers e arrayOperators.\n  Há 2 funções:\n    - concat() => é relacionada ao teclado de números\n    - command() => é relacionada ao teclado de operadores\n  As únicas funções que exigem exceção de tratamento são 'C' \n  e '%' em C é necessário saber em que momento o usuario digita\n  sendo tanto no começo quanto no final\n  Em '%' é necessário verificar de maneira semelhante porém \n  não é feito a alteração das duas variáveis e sim apenas da\n  atual\n  São satisfeitas as seguintes condições:\n  - Não ultrapassar 8 dígitos na concatenação\n  - Não dividir por 0 (Infinity)\n*/\nexport default function App() {\n  const arrayNumbers = [\n    { id: \"m\", value: \"1\" },\n    { id: \"n\", value: \"2\" },\n    { id: \"o\", value: \"3\" },\n    { id: \"i\", value: \"4\" },\n    { id: \"j\", value: \"5\" },\n    { id: \"k\", value: \"6\" },\n    { id: \"e\", value: \"7\" },\n    { id: \"f\", value: \"8\" },\n    { id: \"g\", value: \"9\" },\n    { id: \"q\", value: \"0\" },\n    { id: \"r\", value: \".\" }\n  ];\n  const arrayOperators = [\n    { id: \"a\", value: \"C\" },\n    { id: \"b\", value: \"AC\" },\n    { id: \"c\", value: \"%\" },\n    { id: \"d\", value: \"÷\" },\n    { id: \"h\", value: \"x\" },\n    { id: \"l\", value: \"-\" },\n    { id: \"p\", value: \"+\" },\n    { id: \"s\", value: \"=\" }\n  ];\n\n  const [view, setView] = useState(0);\n  const [PrevNumber, setPrevNumber] = useState(\"\");\n  const [NextNumber, setNextNumber] = useState(\"\");\n  const [operator, setOperator] = useState(\"\");\n  function concat(value) {\n    if (PrevNumber > 9999999 || NextNumber > 9999999) {\n      setView(\"Too long\");\n    } else {\n      if (operator === \"\") {\n        setPrevNumber(PrevNumber + \"\" + value);\n        setView(PrevNumber + \"\" + value);\n      } else {\n        setNextNumber(NextNumber + \"\" + value);\n        setView(NextNumber + \"\" + value);\n      }\n    }\n  }\n  function command(value) {\n    if (value === \"AC\") {\n      setView(0);\n      setNextNumber(\"\");\n      setOperator(\"\");\n      setPrevNumber(\"\");\n    } else if (value === \"C\") {\n      if (PrevNumber !== \"\" && NextNumber === \"\") {\n        setPrevNumber(\"\");\n        setView(0);\n        setOperator(\"\");\n      } else if (PrevNumber !== \"\" && NextNumber !== \"\") {\n        setNextNumber(\"\");\n        setView(0);\n      }\n    } else if (value === \"%\") {\n      if (PrevNumber !== \"\" && NextNumber === \"\") {\n        setView(parseFloat(PrevNumber, 10) / 100);\n        setPrevNumber(parseFloat(PrevNumber, 10) / 100);\n      } else if (PrevNumber !== \"\" && NextNumber !== \"\") {\n        setView(parseFloat(NextNumber, 10) / 100);\n        setNextNumber(parseFloat(NextNumber, 10) / 100);\n      }\n    } else {\n      if (operator === \"\" || operator !== value) {\n        setOperator(value);\n      }\n      if (NextNumber !== \"\") {\n        switch (operator) {\n          case \"+\":\n            setView(parseFloat(PrevNumber, 10) + parseFloat(NextNumber, 10));\n            setPrevNumber(\n              parseFloat(PrevNumber, 10) + parseFloat(NextNumber, 10)\n            );\n            setNextNumber(\"\");\n            break;\n          case \"-\":\n            setView(parseFloat(PrevNumber, 10) - parseFloat(NextNumber, 10));\n            setPrevNumber(\n              parseFloat(PrevNumber, 10) - parseFloat(NextNumber, 10)\n            );\n            setNextNumber(\"\");\n            break;\n          case \"x\":\n            setView(parseFloat(PrevNumber, 10) * parseFloat(NextNumber, 10));\n            setPrevNumber(\n              parseFloat(PrevNumber, 10) * parseFloat(NextNumber, 10)\n            );\n            setNextNumber(\"\");\n            break;\n          case \"÷\":\n            setView(parseFloat(PrevNumber, 10) / parseFloat(NextNumber, 10));\n            setPrevNumber(\n              parseFloat(PrevNumber, 10) / parseFloat(NextNumber, 10)\n            );\n            setNextNumber(\"\");\n            break;\n          case \"=\":\n            command(operator);\n            break;\n          default:\n            setView(\"Err\");\n            break;\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"body\">\n      <div className=\"container\">\n        <div className=\"button\" id=\"viewer\">\n          {view}\n        </div>\n        {arrayNumbers.map(item => (\n          <div\n            onClick={event => concat(item.value)}\n            className=\"button\"\n            id={item.id}\n            value={item.value}\n          >\n            {item.value}\n          </div>\n        ))}\n        {arrayOperators.map(item => (\n          <div\n            onClick={event => command(item.value)}\n            className=\"button\"\n            id={item.id}\n            value={item.value}\n          >\n            {item.value}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}